package Lesson2;

/*
 * Форма наследования Расширение:
 *  Дочерний класс добавляет новые функциональные возможности к родительскому классу, но не меняет наследуемое поведение
 *  В отличие от обобщения или специализации при расширении дочерний класс не переопределяет ни одного метода базового
 *  класса, а добавленные методы слабо связаны с существующими методами родителя
 */
abstract class Animal { // животное
    String habitat; // среда обитания
    public abstract void move(); // любое животное передвигается, даже если не передвигается самостоятельно
}

class Cat extends Animal { // кошка
    int paws;
    int eyes;
    int tail;

    @Override
    public void move() {  } // определяет свой собственный способ передвижения

    void voice() {  // подает голос
        // мяукает
    }

    public void raiseTheTail() { }
}


/**********************************************************************************************************************
 * Форма наследования Специализация:
 *  Дочерний класс является более конкретным, частным или специализированным случаем родительского класса
 *  Дочерний класс удовлетворяет спецификациям родителя во всех существенных моментах, т.е. его можно использовать
 *  вместо родительского класса.
 *  Поведение базового класса, в основном, переопределяется
 *
 */

class Tiger extends Cat {

    @Override
    void voice() {  // подает голос отличный от родительского класса кошка
        // рычит
    }
    // остальные действия может выполнять аналогично кошке
}


/* Форма наследования Комбинирование:
 *  Дочерний класс наследует черты более чем одного родительского класса
 *  Для комбинирования классов используется механизм множественного наследования
 *
 */
interface Fish { // рыба
    default void breathUnderWater() { // дышать под водой

    }
}

class Shark extends Animal implements Fish { // акула
    @Override
    public void move() {
    }

    @Override
    public void breathUnderWater() {
    }
}
