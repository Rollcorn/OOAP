/*
2.1. Опишите АТД LinkedList с предложенным набором операций.
Разделите операции на запросы и команды.
Добавьте где необходимо предусловия и постусловия.
Добавьте запросы статуса команд, для работы которых требуются предусловия (учитывайте в частности случаи, когда список пустой).

2.2. Почему операция tail не сводима к другим операциям (если исходить из эффективной реализации)?

2.3. Операция поиска всех узлов с заданным значением, выдающая список таких узлов, уже не нужна. Почему?
 */
public class LinkedList {
    class Node {}
    // Конструктор:

    /******************************************************************************************
     * Команды:
     */
    // предусловие: список не пустой
    // постусловие: курсор указывает на первый элемент списка
    public void head() { }

    // предусловие: список не пустой
    // постусловие: курсор указывает последний элемент списка
    public void tail() { }

    // предусловие: справа есть элемент
    public void right() { }

    // постусловие: перед текущим узлом новый узел с заданным значением
    public void putLeft(Node item) { }

    // постусловие: следом за текущим узлом новый узел с заданным значением
    public void putRight(Node item) { }

    // постусловие: в конце списка появляется новый элемент
    public void addTail(Node item) { }

    public void replace(Node item) { }

    // постусловие: курсор смещается к правому соседу, если он есть, в противном случае
    //              курсор смещается к левому соседу, если он есть
    public void remove() { }

    // постусловие: в списке отсутствуют элементы равные item
    public void removeAll(Node item) { }

    // постусловие: список пуст
    public void clear() { }

    /***************************************************************************************
     * Запросы:
     */
    public void get(Node item) { }

    public void find(Node item) { }

    public void isHead() { }

    public void isTail() { }

    public void isValue() { }

    // количество элементов в списке
    public int size() { }

}
